-- 1. Create the 'PROG_NAME' Table
CREATE TABLE PROG_NAME (
    UNIT_NBR INT,
    STEP_SEQ_ID INT PRIMARY KEY,  -- Ensuring each step has a unique identifier
    STEP_PROG_NAME VARCHAR(255)  -- The program name for each step
);

-- Create an index on UNIT_NBR and STEP_SEQ_ID to improve performance when querying by unit or step
CREATE INDEX idx_prog_name_unit_seq ON PROG_NAME (UNIT_NBR, STEP_SEQ_ID);

-- 2. Create the 'DEPENDENCY_RULES' Table
CREATE TABLE DEPENDENCY_RULES (
    UNIT_NBR INT,
    RULE_ID INT PRIMARY KEY,  -- Unique rule identifier for each dependency rule
    STEP_SEQ_ID INT,  -- The dependent step
    STEP_DEP_ID INT  -- The step this one depends on
);

-- Create an index on UNIT_NBR, STEP_SEQ_ID, and STEP_DEP_ID to optimize joins with 'PROG_NAME'
CREATE INDEX idx_dependency_rules ON DEPENDENCY_RULES (UNIT_NBR, STEP_SEQ_ID, STEP_DEP_ID);

-- 3. Insert Data into 'PROG_NAME' Table
INSERT INTO PROG_NAME (UNIT_NBR, STEP_SEQ_ID, STEP_PROG_NAME) VALUES
(1, 1, 'PKGIDS_CMMN_UTILITY.PROCIDS_JOB_START'),
(1, 2, 'pkgids_ptf_hrchy_processing.Procids_delete_job_set_nbr'),
(1, 3, 'PKGIDS_PTF_EXTR.ext_static_ptf_table'),
(1, 4, 'PKGIDS_PTF_EXTR.ext_eff_ptf_table'),
(1, 5, 'pkgids_ptf_hrchy_processing.procids_get_tree_a'),
(1, 6, 'pkgids_ptf_hrchy_processing.procids_get_tree_b'),
(1, 7, 'pkgids_ptf_hrchy_processing.procids_get_tree_c'),
(1, 8, 'pkgids_ptf_hrchy_processing.procids_get_tree_d'),
(1, 9, 'pkgids_ptf_hrchy_processing.procids_get_tree_e'),
(1, 10, 'pkgids_ptf_hrchy_processing.procids_get_active_portf'),
(1, 11, 'pkgids_ptf_lineage.procids_process_ptf_lineage'),
(1, 12, 'pkgids_ptf_lineage.procids_summary_to_bookable_rs'),
(1, 13, 'PKGIDS_CMMN_UTILITY.PROCIDS_JOB_END');

-- 4. Insert Data into 'DEPENDENCY_RULES' Table
INSERT INTO DEPENDENCY_RULES (UNIT_NBR, RULE_ID, STEP_SEQ_ID, STEP_DEP_ID) VALUES
(1, 1, 1, 0),
(1, 2, 2, 1),
(1, 3, 3, 2),
(1, 4, 4, 2),
(1, 5, 5, 3),
(1, 6, 5, 4),
(1, 7, 6, 3),
(1, 8, 6, 4),
(1, 9, 7, 3),
(1, 10, 7, 4),
(1, 11, 8, 3),
(1, 12, 9, 3),
(1, 13, 8, 4),
(1, 14, 9, 4),
(1, 15, 10, 5),
(1, 16, 10, 6),
(1, 17, 10, 7),
(1, 18, 10, 8),
(1, 19, 10, 9),
(1, 20, 11, 10),
(1, 21, 12, 11),
(1, 22, 13, 12);

-- 5. Recursive Query to Determine Step Execution Order, with Circular Dependency Prevention

WITH RECURSIVE StepOrder AS (
    -- Base case: Start with steps that have no dependencies (STEP_DEP_ID = 0)
    SELECT
        p.UNIT_NBR,
        p.STEP_SEQ_ID,
        p.STEP_PROG_NAME,
        r.STEP_DEP_ID,
        1 AS step_level,  -- Initial step level is 1
        CAST(p.STEP_SEQ_ID AS VARCHAR(255)) AS path  -- Track the path to avoid circular dependencies
    FROM
        PROG_NAME p
    LEFT JOIN
        DEPENDENCY_RULES r ON p.STEP_SEQ_ID = r.STEP_SEQ_ID
    WHERE
        r.STEP_DEP_ID = 0  -- Start with steps that have no dependencies

    UNION ALL

    -- Recursive case: For each step, join with its dependencies and increment the step level
    SELECT
        p.UNIT_NBR,
        p.STEP_SEQ_ID,
        p.STEP_PROG_NAME,
        r.STEP_DEP_ID,
        so.step_level + 1,  -- Increment the level for each dependency
        so.path || '->' || CAST(p.STEP_SEQ_ID AS VARCHAR(255))  -- Append current step to the path
    FROM
        PROG_NAME p
    JOIN
        DEPENDENCY_RULES r ON p.STEP_SEQ_ID = r.STEP_SEQ_ID
    JOIN
        StepOrder so ON r.STEP_DEP_ID = so.STEP_SEQ_ID
    WHERE
        so.path NOT LIKE '%' || CAST(p.STEP_SEQ_ID AS VARCHAR(255)) || '%'  -- Check for circular dependencies
)
-- Final output: Select steps ordered by their execution level
SELECT
    UNIT_NBR,
    STEP_SEQ_ID,
    STEP_PROG_NAME,
    step_level,
    path
FROM
    StepOrder
WHERE
    UNIT_NBR = 1  -- Specify the UNIT_NBR you're interested in
ORDER BY
    step_level;  -- Order the steps based on the step_level
